# Spring 왜 나왔냐?

## Problem : 클래스들이 번잡해지면 복잡해지는 바닐라 자바
```
/package/com.kbstar.app;

/public class/Test {
    /public static void/main(String args[]){
        TestService service = /new/TestService();
        service.register();
    }
}
```

단순히 이 코드만 해도…! 다른 클래스를 불러올 때 클래스들이 한두개도 아니고 여러개 얽히면 복잡해진다. 유지보수 하기가 너무 어려워진다..!!

1) 인터페이스로 개발의 표준화를 한다
-> 오타라든지 규격화되지 않은 코딩이 이뤄진다. 디버깅 너무 어려워져
한두개야 수정하면 되지만 수십가지가 넘어가면 정말 고치기 힘들다. 
2) 클래스 하나가 사라진다고 전체가 꼬여버리는 현상이 줄어든다
3) 서비스 일부 내용을 추가하거나 할 때마다 코드를 까서 새로 만들어야하는 문제가 생긴다. 꼬리를 물고 또 물고 물고 올라가면 진짜 화가 난다.

```.<스프링 쓰기 전>  
public class App {
    public static void main(String args[]){
        TV tv = new LGTV();
        tv.turnOn();
    }
}
---> 다 좋은데, 인터페이스를 써도...LGTV 랑 SATV 계속 클래스 바꿔끼워줘야한다.
```

## Solution : 디자인패턴
디자인패턴의 대표가 인터페이스(자바) = 개발표준 = 공통점 집합 = 무조건 이 기능이 있어야한다. 
근데, 이 인터페이스만으로도 해결이 안되어서 만들어진 게 Spring이다. 
그 전날에는 죽음이었다…스프링 등장으로 화창한 봄날이 오게 되었다. 

### Spring은 어떻게 이 문제를 해결했나?
<클래스끼리의 dependency를 loose하게 묶어줬기 때문이다.>
누군가가 스프링 프레임워크를 왜 쓰냐고 물어본다면!!
==> Class끼리의 dependency를  루즈하게 해줌으로서 손쉽게 클래스를 갈아끼울 수 있게 해준다. 
